import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
/**
 * Represents the parameters for the "initialize" function.
 */
export type InitializeParams = {
    defaultAdmin: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_defaultAdmin";
    }>;
    contractURI: AbiParameterToPrimitiveType<{
        type: "string";
        name: "_contractURI";
    }>;
    trustedForwarders: AbiParameterToPrimitiveType<{
        type: "address[]";
        name: "_trustedForwarders";
    }>;
    platformFeeRecipient: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_platformFeeRecipient";
    }>;
    platformFeeBps: AbiParameterToPrimitiveType<{
        type: "uint16";
        name: "_platformFeeBps";
    }>;
};
export declare const FN_SELECTOR: "0xaaae5633";
/**
 * Encodes the parameters for the "initialize" function.
 * @param options - The options for the initialize function.
 * @returns The encoded ABI parameters.
 * @extension PREBUILTS
 * @example
 * ```ts
 * import { encodeInitializeParams } "thirdweb/extensions/prebuilts";
 * const result = encodeInitializeParams({
 *  defaultAdmin: ...,
 *  contractURI: ...,
 *  trustedForwarders: ...,
 *  platformFeeRecipient: ...,
 *  platformFeeBps: ...,
 * });
 * ```
 */
export declare function encodeInitializeParams(options: InitializeParams): `0x${string}`;
/**
 * Calls the "initialize" function on the contract.
 * @param options - The options for the "initialize" function.
 * @returns A prepared transaction object.
 * @extension PREBUILTS
 * @example
 * ```ts
 * import { initialize } from "thirdweb/extensions/prebuilts";
 *
 * const transaction = initialize({
 *  contract,
 *  defaultAdmin: ...,
 *  contractURI: ...,
 *  trustedForwarders: ...,
 *  platformFeeRecipient: ...,
 *  platformFeeBps: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function initialize(options: BaseTransactionOptions<InitializeParams | {
    asyncParams: () => Promise<InitializeParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction>;
//# sourceMappingURL=initialize.d.ts.map