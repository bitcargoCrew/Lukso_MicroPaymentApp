import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "name" function.
 */
export type NameParams = {
    name: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "name";
    }>;
};
export declare const FN_SELECTOR: "0x691f3431";
/**
 * Encodes the parameters for the "name" function.
 * @param options - The options for the name function.
 * @returns The encoded ABI parameters.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeNameParams } "thirdweb/extensions/ens";
 * const result = encodeNameParams({
 *  name: ...,
 * });
 * ```
 */
export declare function encodeNameParams(options: NameParams): `0x${string}`;
/**
 * Decodes the result of the name function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ENS
 * @example
 * ```ts
 * import { decodeNameResult } from "thirdweb/extensions/ens";
 * const result = decodeNameResult("...");
 * ```
 */
export declare function decodeNameResult(result: Hex): string;
/**
 * Calls the "name" function on the contract.
 * @param options - The options for the name function.
 * @returns The parsed result of the function call.
 * @extension ENS
 * @example
 * ```ts
 * import { name } from "thirdweb/extensions/ens";
 *
 * const result = await name({
 *  name: ...,
 * });
 *
 * ```
 */
export declare function name(options: BaseTransactionOptions<NameParams>): Promise<string>;
//# sourceMappingURL=name.d.ts.map