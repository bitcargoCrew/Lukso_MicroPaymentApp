import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "pubkey" function.
 */
export type PubkeyParams = {
    name: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "name";
    }>;
};
export declare const FN_SELECTOR: "0xc8690233";
/**
 * Encodes the parameters for the "pubkey" function.
 * @param options - The options for the pubkey function.
 * @returns The encoded ABI parameters.
 * @extension ENS
 * @example
 * ```ts
 * import { encodePubkeyParams } "thirdweb/extensions/ens";
 * const result = encodePubkeyParams({
 *  name: ...,
 * });
 * ```
 */
export declare function encodePubkeyParams(options: PubkeyParams): `0x${string}`;
/**
 * Decodes the result of the pubkey function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ENS
 * @example
 * ```ts
 * import { decodePubkeyResult } from "thirdweb/extensions/ens";
 * const result = decodePubkeyResult("...");
 * ```
 */
export declare function decodePubkeyResult(result: Hex): readonly [`0x${string}`, `0x${string}`];
/**
 * Calls the "pubkey" function on the contract.
 * @param options - The options for the pubkey function.
 * @returns The parsed result of the function call.
 * @extension ENS
 * @example
 * ```ts
 * import { pubkey } from "thirdweb/extensions/ens";
 *
 * const result = await pubkey({
 *  name: ...,
 * });
 *
 * ```
 */
export declare function pubkey(options: BaseTransactionOptions<PubkeyParams>): Promise<readonly [`0x${string}`, `0x${string}`]>;
//# sourceMappingURL=pubkey.d.ts.map