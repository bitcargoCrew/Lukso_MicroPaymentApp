import { jsx as _jsx } from "react/jsx-runtime";
import { useContext } from "react";
import { ModalConfigCtx, SetModalConfigCtx, } from "../../providers/wallet-ui-states-provider.js";
import { useScreenContext } from "../../ui/ConnectWallet/Modal/screen.js";
import { WalletEntryButton } from "../../ui/ConnectWallet/WalletEntryButton.js";
import { reservedScreens } from "../../ui/ConnectWallet/constants.js";
import { LoadingScreen } from "../shared/LoadingScreen.js";
import { InAppWalletFormUI } from "./InAppWalletFormUI.js";
import { useInAppWalletLocale } from "./useInAppWalletLocale.js";
/**
 *
 * @internal
 */
function InAppWalletSelectionUI(props) {
    const { screen } = useScreenContext();
    const { modalSize } = useContext(ModalConfigCtx);
    const locale = useInAppWalletLocale();
    const setModalConfig = useContext(SetModalConfigCtx);
    function saveState(data) {
        setModalConfig((p) => ({
            ...p,
            data,
        }));
    }
    // do not show the "selectUI" if
    // modal is compact or
    // it is being rendered in Safe wallet
    if (modalSize === "wide" ||
        (screen !== reservedScreens.main && modalSize === "compact")) {
        return (_jsx(WalletEntryButton, { walletId: props.wallet.id, selectWallet: () => {
                saveState({});
                props.select();
            } }));
    }
    if (!locale) {
        return _jsx(LoadingScreen, { height: "195px" });
    }
    return (_jsx(InAppWalletFormUI, { locale: locale, wallet: props.wallet, done: props.done, select: props.select, goBack: props.goBack }));
}
export default InAppWalletSelectionUI;
//# sourceMappingURL=InAppWalletSelectionUI.js.map