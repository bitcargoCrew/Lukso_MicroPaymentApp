import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled from "@emotion/styled";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { CrossCircledIcon } from "@radix-ui/react-icons";
import Fuse from "fuse.js";
import { useContext, useMemo, useRef, useState } from "react";
import walletInfos from "../../../../../wallets/__generated__/wallet-infos.js";
import { createWallet } from "../../../../../wallets/create-wallet.js";
import { useWalletConnectionCtx } from "../../../../core/hooks/others/useWalletConnectionCtx.js";
import { ModalConfigCtx } from "../../../providers/wallet-ui-states-provider.js";
import { sortWallets } from "../../../utils/sortWallets.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { Container, ModalHeader } from "../../components/basic.js";
import { Input } from "../../components/formElements.js";
import { Text } from "../../components/text.js";
import { useCustomTheme } from "../../design-system/CustomThemeProvider.js";
import { iconSize, spacing } from "../../design-system/index.js";
import { useDebouncedValue } from "../../hooks/useDebouncedValue.js";
import { useShowMore } from "../../hooks/useShowMore.js";
import { WalletEntryButton } from "../WalletEntryButton.js";
/**
 *
 * @internal
 */
function AllWalletsUI(props) {
    const { recommendedWallets, wallets: specifiedWallets } = useWalletConnectionCtx();
    const { modalSize } = useContext(ModalConfigCtx);
    const fuseInstance = useMemo(() => {
        return new Fuse(walletInfos, {
            threshold: 0.4,
            keys: [
                {
                    name: "name",
                    weight: 1,
                },
            ],
        });
    }, []);
    const listContainer = useRef(null);
    const [searchTerm, setSearchTerm] = useState("");
    const deferredSearchTerm = useDebouncedValue(searchTerm, 300);
    const walletInfosWithSearch = deferredSearchTerm
        ? fuseInstance.search(deferredSearchTerm).map((result) => result.item)
        : walletInfos;
    const installedWalletsFirst = sortWallets(walletInfosWithSearch, recommendedWallets);
    // show specified wallets first
    const sortedWallets = useMemo(() => {
        return installedWalletsFirst.sort((a, b) => {
            const aIsSpecified = specifiedWallets.find((w) => w.id === a.id);
            const bIsSpecified = specifiedWallets.find((w) => w.id === b.id);
            if (aIsSpecified && !bIsSpecified) {
                return -1;
            }
            if (!aIsSpecified && bIsSpecified) {
                return 1;
            }
            return 0;
        });
    }, [installedWalletsFirst, specifiedWallets]);
    const { itemsToShow, lastItemRef } = useShowMore(10, 10);
    const walletInfosToShow = sortedWallets.slice(0, itemsToShow);
    return (_jsxs(Container, { fullHeight: true, flex: "column", animate: "fadein", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: "Select Wallet", onBack: props.onBack }) }), _jsx(Spacer, { y: "xs" }), _jsx(Container, { px: "lg", children: _jsxs("div", { style: {
                        display: "flex",
                        alignItems: "center",
                        position: "relative",
                    }, children: [_jsx(StyledMagnifyingGlassIcon, { width: iconSize.md, height: iconSize.md }), _jsx(Input, { style: {
                                padding: `${spacing.sm} ${spacing.md} ${spacing.sm} ${spacing.xxl}`,
                            }, tabIndex: -1, variant: "outline", placeholder: "Search Wallet", value: searchTerm, onChange: (e) => {
                                listContainer.current?.parentElement?.scroll({
                                    top: 0,
                                });
                                setSearchTerm(e.target.value);
                            } }), deferredSearchTerm !== searchTerm && (_jsx("div", { style: {
                                position: "absolute",
                                right: spacing.md,
                            }, children: _jsx(Spinner, { size: "md", color: "accentText" }) }))] }) }), walletInfosToShow.length > 0 && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsxs(Container, { animate: "fadein", expand: true, scrollY: true, children: [_jsx("div", { ref: listContainer, style: {
                                    maxHeight: modalSize === "compact" ? "400px" : undefined,
                                    paddingInline: spacing.md,
                                }, children: walletInfosToShow.map((walletInfo, i) => {
                                    const isLast = i === walletInfosToShow.length - 1;
                                    return (_jsx("li", { ref: isLast ? lastItemRef : undefined, style: {
                                            listStyle: "none",
                                        }, children: _jsx(WalletEntryButton, { walletId: walletInfo.id, selectWallet: () => {
                                                const wallet = createWallet(walletInfo.id);
                                                props.onSelect(wallet);
                                            } }) }, walletInfo.id));
                                }) }), _jsx(Spacer, { y: "xl" })] })] })), walletInfosToShow.length === 0 && (_jsxs(Container, { flex: "column", gap: "md", center: "both", color: "secondaryText", animate: "fadein", expand: true, style: {
                    minHeight: "250px",
                }, children: [_jsx(CrossCircledIcon, { width: iconSize.xl, height: iconSize.xl }), _jsx(Text, { children: " No Results " })] }))] }));
}
const StyledMagnifyingGlassIcon = /* @__PURE__ */ styled(MagnifyingGlassIcon)(() => {
    const theme = useCustomTheme();
    return {
        color: theme.colors.secondaryText,
        position: "absolute",
        left: spacing.sm,
    };
});
export default AllWalletsUI;
//# sourceMappingURL=AllWalletsUI.js.map