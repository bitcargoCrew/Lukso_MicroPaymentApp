"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMintSignature = exports.mintWithSignature = void 0;
const addresses_js_1 = require("../../../constants/addresses.js");
const upload_js_1 = require("../../../storage/upload.js");
const bigint_js_1 = require("../../../utils/bigint.js");
const date_js_1 = require("../../../utils/date.js");
const units_js_1 = require("../../../utils/units.js");
const uuid_js_1 = require("../../../utils/uuid.js");
const decimals_js_1 = require("../../erc20/read/decimals.js");
const mintWithSignature_js_1 = require("../__generated__/ISignatureMintERC721/write/mintWithSignature.js");
/**
 * Mints a new ERC721 token with the given minter signature
 * @param options - The transaction options.
 * @example
 * ```ts
 * import { mintWithSignature, generateMintSignature } from "thirdweb/extensions/erc721";
 *
 * const { payload, signature } = await generateMintSignature(...)
 *
 * const transaction = mintWithSignature({
 *   contract,
 *   payload,
 *   signature,
 * });
 * await sendTransaction({ transaction, account });
 * ```
 * @extension ERC721
 * @returns A promise that resolves to the transaction result.
 */
exports.mintWithSignature = mintWithSignature_js_1.mintWithSignature;
/**
 * Generates the payload and signature for minting an ERC721 token.
 * @param options - The options for the minting process.
 * @example
 * ```ts
 * import { mintWithSignature, generateMintSignature } from "thirdweb/extensions/erc721";
 *
 * const { payload, signature } = await generateMintSignature({
 *   account,
 *   contract,
 *   mintRequest: {
 *     to: "0x...",
 *     metadata: {
 *       name: "My NFT",
 *       description: "This is my NFT",
 *       image: "https://example.com/image.png",
 *     },
 *   },
 * });
 *
 * const transaction = mintWithSignature({
 *   contract,
 *   payload,
 *   signature,
 * });
 * await sendTransaction({ transaction, account });
 * ```
 * @extension ERC721
 * @returns A promise that resolves to the payload and signature.
 */
async function generateMintSignature(options) {
    const { mintRequest, account, contract } = options;
    let priceInWei = 0n;
    if (mintRequest.price) {
        const d = await (0, decimals_js_1.decimals)(options).catch(() => 18);
        priceInWei = (0, units_js_1.toUnits)(mintRequest.price.toString(), d);
    }
    const startTime = mintRequest.validityStartTimestamp || new Date(0);
    const endTime = mintRequest.validityEndTimestamp || (0, date_js_1.tenYearsFromNow)();
    const uid = mintRequest.uid || (await (0, uuid_js_1.randomBytes32)());
    let uri;
    if (typeof mintRequest.metadata === "object") {
        uri = (await (0, upload_js_1.upload)({
            client: options.contract.client,
            files: [mintRequest.metadata],
        }))[0];
    }
    else {
        uri = mintRequest.metadata;
    }
    const payload = {
        to: mintRequest.to,
        royaltyRecipient: mintRequest.royaltyRecipient || account.address,
        royaltyBps: (0, bigint_js_1.toBigInt)(mintRequest.royaltyBps || 0),
        primarySaleRecipient: mintRequest.primarySaleRecipient || account.address,
        uri: uri || "",
        price: priceInWei,
        currency: mintRequest.currency || addresses_js_1.NATIVE_TOKEN_ADDRESS,
        validityStartTimestamp: (0, date_js_1.dateToSeconds)(startTime),
        validityEndTimestamp: (0, date_js_1.dateToSeconds)(endTime),
        uid,
    };
    const signature = await account.signTypedData({
        domain: {
            name: "TokenERC721",
            version: "1",
            chainId: contract.chain.id,
            verifyingContract: contract.address,
        },
        types: { MintRequest: MintRequest721 },
        primaryType: "MintRequest",
        message: payload,
    });
    return { payload, signature };
}
exports.generateMintSignature = generateMintSignature;
const MintRequest721 = [
    { name: "to", type: "address" },
    { name: "royaltyRecipient", type: "address" },
    { name: "royaltyBps", type: "uint256" },
    { name: "primarySaleRecipient", type: "address" },
    { name: "uri", type: "string" },
    { name: "price", type: "uint256" },
    { name: "currency", type: "address" },
    { name: "validityStartTimestamp", type: "uint128" },
    { name: "validityEndTimestamp", type: "uint128" },
    { name: "uid", type: "bytes32" },
];
//# sourceMappingURL=sigMint.js.map