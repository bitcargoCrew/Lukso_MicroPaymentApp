"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reverse = exports.decodeReverseResult = exports.encodeReverseParams = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
exports.FN_SELECTOR = "0xec11c823";
const FN_INPUTS = [
    {
        type: "bytes",
        name: "reverseName",
    },
];
const FN_OUTPUTS = [
    {
        type: "string",
    },
    {
        type: "address",
    },
    {
        type: "address",
    },
    {
        type: "address",
    },
];
/**
 * Encodes the parameters for the "reverse" function.
 * @param options - The options for the reverse function.
 * @returns The encoded ABI parameters.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeReverseParams } "thirdweb/extensions/ens";
 * const result = encodeReverseParams({
 *  reverseName: ...,
 * });
 * ```
 */
function encodeReverseParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.reverseName]);
}
exports.encodeReverseParams = encodeReverseParams;
/**
 * Decodes the result of the reverse function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ENS
 * @example
 * ```ts
 * import { decodeReverseResult } from "thirdweb/extensions/ens";
 * const result = decodeReverseResult("...");
 * ```
 */
function decodeReverseResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeReverseResult = decodeReverseResult;
/**
 * Calls the "reverse" function on the contract.
 * @param options - The options for the reverse function.
 * @returns The parsed result of the function call.
 * @extension ENS
 * @example
 * ```ts
 * import { reverse } from "thirdweb/extensions/ens";
 *
 * const result = await reverse({
 *  reverseName: ...,
 * });
 *
 * ```
 */
async function reverse(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.reverseName],
    });
}
exports.reverse = reverse;
//# sourceMappingURL=reverse.js.map