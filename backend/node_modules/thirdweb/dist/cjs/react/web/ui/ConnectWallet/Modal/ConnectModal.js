"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const wallet_hooks_js_1 = require("../../../../core/hooks/wallets/wallet-hooks.js");
const wallet_ui_states_provider_js_1 = require("../../../providers/wallet-ui-states-provider.js");
const Modal_js_1 = require("../../components/Modal.js");
const CustomThemeProvider_js_1 = require("../../design-system/CustomThemeProvider.js");
const constants_js_1 = require("../constants.js");
const ConnectModalContent_js_1 = require("./ConnectModalContent.js");
const screen_js_1 = require("./screen.js");
/**
 * @internal
 */
const ConnectModal = () => {
    const { theme, modalSize } = (0, react_1.useContext)(wallet_ui_states_provider_js_1.ModalConfigCtx);
    const screenSetup = (0, screen_js_1.useSetupScreen)();
    const { screen, setScreen, initialScreen } = screenSetup;
    const isWalletModalOpen = (0, wallet_ui_states_provider_js_1.useIsWalletModalOpen)();
    const setIsWalletModalOpen = (0, wallet_ui_states_provider_js_1.useSetIsWalletModalOpen)();
    const [hideModal, setHideModal] = (0, react_1.useState)(false);
    // const connectionStatus = useConnectionStatus();
    const closeModal = (0, react_1.useCallback)(() => {
        setIsWalletModalOpen(false);
        (0, constants_js_1.onModalUnmount)(() => {
            setScreen(initialScreen);
        });
    }, [initialScreen, setIsWalletModalOpen, setScreen]);
    // const [prevConnectionStatus, setPrevConnectionStatus] =
    //   useState(connectionStatus);
    // useEffect(() => {
    //   setPrevConnectionStatus(connectionStatus);
    // }, [connectionStatus]);
    // const disconnect = useDisconnect();
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    // const isWrapperConnected = !!wallet?.getPersonalWallet();
    // const isWrapperScreen =
    //   typeof screen !== "string" && !!screen.personalWallets;
    // reopen the screen to complete wrapper wallet's next step after connecting a personal wallet
    // useEffect(() => {
    //   if (
    //     // !isWrapperConnected &&
    //     isWrapperScreen &&
    //     !isWalletModalOpen &&
    //     // connectionStatus === "connected" &&
    //     // prevConnectionStatus === "connecting"
    //   ) {
    //     setIsWalletModalOpen(true);
    //   }
    // }, [
    //   isWalletModalOpen,
    //   connectionStatus,
    //   setIsWalletModalOpen,
    //   isWrapperScreen,
    //   // isWrapperConnected,
    //   prevConnectionStatus,
    // ]);
    (0, react_1.useEffect)(() => {
        if (!isWalletModalOpen) {
            (0, constants_js_1.onModalUnmount)(() => {
                setHideModal(false);
            });
        }
    }, [isWalletModalOpen]);
    const setModalVisibility = (0, react_1.useCallback)((value) => setHideModal(!value), []);
    // if wallet is suddenly disconnected when showing the sign in screen, close the modal and reset the screen
    (0, react_1.useEffect)(() => {
        if (isWalletModalOpen &&
            screen === constants_js_1.reservedScreens.signIn &&
            !activeAccount) {
            setScreen(initialScreen);
            setIsWalletModalOpen(false);
        }
    }, [
        initialScreen,
        isWalletModalOpen,
        screen,
        setIsWalletModalOpen,
        setScreen,
        activeAccount,
    ]);
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: theme, children: (0, jsx_runtime_1.jsx)(Modal_js_1.Modal, { hide: hideModal, size: modalSize, open: isWalletModalOpen, setOpen: (value) => {
                if (hideModal) {
                    return;
                }
                setIsWalletModalOpen(value);
                if (!value) {
                    (0, constants_js_1.onModalUnmount)(() => {
                        // if (connectionStatus === "connecting") {
                        //   disconnect();
                        // }
                        setScreen(initialScreen);
                    });
                }
            }, children: (0, jsx_runtime_1.jsx)(ConnectModalContent_js_1.ConnectModalContent, { screenSetup: screenSetup, setModalVisibility: setModalVisibility, isOpen: isWalletModalOpen, onClose: closeModal }) }) }));
};
exports.default = ConnectModal;
//# sourceMappingURL=ConnectModal.js.map